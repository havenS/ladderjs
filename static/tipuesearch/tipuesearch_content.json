{"pages":[{"title":"Welcome","text":"LadderJS Welcome to LadderJS, a Node JS MVC framework inspired by Symfony, Yii or Ruby On Rails. By using LadderJS, you'll benefit from the included: Router: using Express 4 View layer: using Pug Authentication system: using Passport Data layer: using Sequelize Logger: using Winston Style layer: using LESS or SASS CRUD scaffolding","tags":"","url":"Welcome.html"},{"title":"Installation","text":"Installation Start a new project: $ mkdir ladder-demo &amp;&amp; cd ladder-demo Initialize your project: $ npm init Add the LadderJS dependency: $ npm install --save ladderjs Add the LadderJS command line shortcut in the package.json: { ... &quot;scripts&quot;: { ... &quot;ladderjs&quot;: &quot;ladderjs&quot; }, ... }","tags":"","url":"Installation.html"},{"title":"Usage","text":"Usage To start using LadderJS simply create an index.js file containing the following: import ladderjs from 'ladderjs' const options = {} const app = ladderjs() app.start() Then launch it use the command: $ node . You'll then have have a basic website, configured using all the default settings (check it in the configuration page). The basic app is using MaterializeCSS as CSS-JS framework, and shows a homepage, a login\/signup pages, and a protected page.","tags":"","url":"Usage.html"},{"title":"Configuration","text":"Configuration Configuration variables LadderJS need a set of variables to define its behaviours and thus make it suite your needs. We recommended using a .env file set the database url but you can also add it to the config object passed while instantiating LadderJS. You'll find below a table summarizing the available config properties and their environment variables counterparts. Property Type Default Notes Port STRING INT 8080 stylesProcessor STRING 'less' 'less' or 'sass' loggerLevel STRING 'info' 'info', 'warning' or 'fatal' debugRoutes BOOLEAN false Will log all the available routes on application start, usefully to debug controllersPath STRING '\/controllers' The path used to find the controllers files modelsPath STRING '\/models' The path used to find the models files publicPath STRING '\/public' The path used to serve various files. It can be archives, documents or third party libraries. stylesPath STRING '\/styles' The path used to find the styles files viewsPath STRING '\/views' The path used to find the views Pug files auth OBJECT null If you want to use an already existing user model, pass a Sequelize model, the name of the username field and the name of the password field routes ARRAY[OBJECT] [] An array of the routes you need to define. You'll find further information on the Routing documentation page disabledRoutes ARRAY[STRING] [] If you need to disable a default route provided by the framework, you can pass the url of the route in this array Operating modes LadderJS offers you 2 operating modes, feel free to choose which one you want to use. Minimum impact First, you can choose to use LadderJS as a completely hidden framework. That's the easiest and the quickest to bootstrap a project. That's the default mode. Hands-on You can use the command line to copy all the files from the framework. This method allows you to edit the controllers, models and views to fine tune them. Database seeds","tags":"","url":"Configuration.html"},{"title":"Authentication","text":"Authentication auth config object { model email field password field } redirect on login redirect on logout \/logout?returnTo=\/","tags":"","url":"Authentication.html"},{"title":"Flash","text":"Flash A flash message system exists req.flash(KEY', MESSAGE) req.flash('error', 'Your error message') req.flash('success', 'Your success message')","tags":"","url":"Flash.html"},{"title":"Routing","text":"Routing","tags":"","url":"Routing.html"}]}
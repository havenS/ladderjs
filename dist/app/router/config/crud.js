'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processCrudRoute = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _shared = require('./shared');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getCrudRoutes = function getCrudRoutes(url) {
  return {
    index: {
      url: url,
      method: 'get'
    },
    new: {
      url: url + '/new',
      method: 'get'
    },
    create: {
      url: url + '/create',
      method: 'post'
    },
    view: {
      url: url + '/:id',
      method: 'get'
    },
    edit: {
      url: url + '/:id',
      method: 'get'
    },
    update: {
      url: url + '/:id',
      method: 'post'
    },
    delete: {
      url: url + '/:id',
      method: 'delete'
    }
  };
};

var getCrudFields = function getCrudFields(Model) {
  var primaryField = void 0;
  var attributes = Model.attributes;
  var fields = (0, _keys2.default)(attributes).map(function (field) {
    if (field.primaryKey) {
      primaryField = attributes[field];
    }
    return {
      name: field,
      type: attributes[field].type.key,
      auto: !!attributes[field]._autoGenerated,
      primary: !!attributes[field].primaryKey,
      allowNull: attributes[field].allowNull
    };
  }).filter(function (field) {
    return !field.primary;
  });

  return {
    primaryField: primaryField,
    fields: fields
  };
};

var processCrud = function processCrud(type, _ref, crudRoutes, Model) {
  var model = _ref.model,
      url = _ref.url,
      view = _ref.view;
  return function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(req, res) {
      var action, viewPath, data;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              action = require('../controllers/CrudController')[type + 'Entity'];
              viewPath = (0, _shared.getView)(view, url, type);
              _context.next = 4;
              return action(req, res, Model);

            case 4:
              data = _context.sent;

              if (!data) {
                _context.next = 10;
                break;
              }

              data = (0, _extends3.default)({
                modelName: model,
                newUrl: crudRoutes.new.url,
                createUrl: crudRoutes.create.url
              }, getCrudFields(Model), data);
              return _context.abrupt('return', res.render(viewPath, data));

            case 10:
              return _context.abrupt('return', res.redirect(req.ladderjs.getUrl(crudRoutes.index.url, req.ladderjs)));

            case 11:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
};

var processCrudRoute = exports.processCrudRoute = function processCrudRoute(app, config) {
  var crudRoutes = getCrudRoutes(config.url);
  (0, _keys2.default)(crudRoutes).forEach(function (type) {
    var _crudRoutes$type = crudRoutes[type],
        url = _crudRoutes$type.url,
        method = _crudRoutes$type.method;

    var model = require(app.modelsPath + '/' + config.model);
    var Model = model.default ? model.default(app.db) : model(app.db);
    app[method](app.ladderjs.getUrl(url), function (req, res, next) {
      return (0, _shared.authenticateUrl)(config.auth, app.policies)(req, res, next, config);
    }, processCrud(type, config, crudRoutes, Model));
  });
};